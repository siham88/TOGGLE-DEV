package radseq;


###################################################################################################################################
#
# Copyright 2014 IRD-CIRAD
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/> or
# write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# You should have received a copy of the CeCILL-C license with this program.
#If not see <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.txt>
#
# Intellectual property belongs to IRD, CIRAD and South Green developpement plateform
# Written by Cecile Monat, Christine Tranchant, Ayite Kougbeadjo, Cedric Farcy, Mawusse Agbessi, Marilyne Summo, Julie Orjuela, Sebastien Ravel and Francois Sabot
#
###################################################################################################################################

use strict;
use warnings;
use Data::Dumper;

use lib qw(.);
use localConfig;
use toolbox;


################################################################################################
# sub radseq::parseKeyFile => to parse radseq keyfile in
################################################################################################
# arguments :
# 	- fileIn : the Keyfile file to split
#	- dirOut : the directory that contains all the files generated by radseq::splitKeyFile (barecode files)
################################################################################################
# return boolean :
#	- 1 if radseq::splitKeyFile has runned correctly
#	- else 0
################################################################################################

sub splitKeyFile
{
	toolbox::exportLog("ERROR: radseq::splitKeyFile : should done at least two arguments\n",0) if (@_ < 2);
	my ($keyFile,$dirOut)=@_;
	
	toolbox::exportLog("INFOS: radseq::splitKeyFile : running\n", 1);
	
	my $comp=0;
	my (@head, @barcodeList, $outputFileName);

	open(KEYFILE, "<", $keyFile) or toolbox::exportLog ("ERROR: radseq::splitKeyFile : Can't open the file $keyFile $!\n",0); # Reading keyfile input
	while (<KEYFILE>)								# for each line of the keyfile
	{
												#######   >>>>> dos2unix in keyFile in order to change the endline windows to unix !!!!. <<<<<
		my $line = $_;								# read line
		chomp $line;
		if ( $comp == 0 )							# Open keyFile and check if the 4 first column have "Flowcell\tLane\tBarcode\tDNASample" header. if it's ok,  the keyfile is splitted by barecode.
		{
			@head = split("\t",$line,5);
			if ($head[0] ne "Flowcell" or $head[1] ne "Lane" or $head[2] ne "Barcode" or $head[3] ne "DNASample")
			{
				toolbox::exportLog("ERROR: radseq::splitKeyFile : keyfile header of $keyFile must to have 'Flowcell\tLane\tBarcode\tDNASample columns' '$! \n",0);
				exit;
			}
			$comp+=1;
		}
		else										# If the header is ok, the keyfile is splitted by barecode name (a barcode file by lane is generated)
		{
			$comp+=1;
			##DEBUG print $line."\n";
			my ($flowcell, $lane, $barcode, $DNASample, $other) = split("\t",$line,5) ;
			##DEBUG print $DNASample."\n";
			
			if ($DNASample =~ m/.*\..*/ )			# change "." by "_" to run radseq::process_radtags
			{
				$DNASample =~ s/\./_/;
			}
			
			if ($lane !~ m/^\d+$/ )					# Test if lane is not numeric
			{
				toolbox::exportLog("ERROR: radseq::splitKeyFile : The Keyfile lane $lane on line $comp is not numeric for file $keyFile ! \n",0);
				exit;
			}
						
			$outputFileName ="$dirOut/barcode_run01_lane$lane.txt";
			##DEBUG print "$outputFileName\n";
			open(LANEFILE, ">>",$outputFileName) or toolbox::exportLog("ERROR: radseq::splitKeyFile : Can't open the file $outputFileName $!\n",0);
			print LANEFILE $barcode."\t".$DNASample."\n";
						 
			push (@barcodeList, $outputFileName) if !($outputFileName ~~ @barcodeList);  # push in a array the files created after split key file.  
		}
		
	}
	close LANEFILE;
	close KEYFILE;
	return @barcodeList;
}

#################################################################################################
## END sub radseq::splitKeyFile
#################################################################################################




################################################################################################
# sub radseq::parseDirectory => parse the input directory and return information in a hash at the key:value way (lane:file)
################################################################################################
# arguments :
#	$initialDir : the directory that contains all the files fastq
################################################################################################
#	return a hash with the list of directories generated
################################################################################################

sub parseDirectory
{
	toolbox::exportLog("ERROR: radseq::parseDirectory : should get exactly one argument\n",0) if (@_ != 2); ## Test nombre d'arguments attendu
	my ($initialDir,$temporaryDir)=@_;
	#print "DIR: $initialDir\n";
	$temporaryDir=~s/(^.+\/).+\/$/$1/;
	my $listOfFiles = toolbox::readDir($initialDir);		# list of files/folder present in $initialDir
	#print Dumper $listOfFiles;
	my ($fileFastq, $laneDirectory, @laneDirectories);
	my @listOfFiles = @$listOfFiles;						# recovery of this folder/files
	for (my $i=0; $i<=$#listOfFiles; $i++)					# for each of them
	{
		if ($listOfFiles[$i]=~m/(.fastq)$/)					# if not a zip folder
		{
			#print "$listOfFiles[$i]\n";
			$fileFastq="$listOfFiles[$i]";
			toolbox::exportLog("INFOS: radseq::parseDirectory : running the file $fileFastq\n", 1);
			#toolbox::checkFormatFastq($fileFastq);
			open(FASTQ,"<", $fileFastq) or toolbox::exportLog("ERROR: radseq::parseDirectory : Cannot open the file $fileFastq\n$!\n",0);
			if ($fileFastq=~m/.+_([0-9]).fastq$/)
			{
				#print "$1\n";
				$laneDirectory="$temporaryDir"."/lane$1";
				#print "LANEDIRECTORY : $laneDirectory\n";
				mkdir $laneDirectory if !(-e $laneDirectory);
				push(@laneDirectories, $laneDirectory) if !($laneDirectory ~~ @laneDirectories); 
				`mv $fileFastq $laneDirectory`;
				
			}
			else
			{
				toolbox::exportLog("ERROR: radseq::parseDirectory : the file $fileFastq has to finish by [1-8].fastq ex. 'C05F2ACXX_5.fastq'\n$!\n",0);
			}
			
		}
		
	}
	toolbox::exportLog("INFOS: radseq::parseDirectory : fastq directory $initialDir was parsed correctly.\n", 1);
	#print Dumper @laneDirectories;
	close FASTQ;
	return @laneDirectories;
}

#################################################################################################
## END sub radseq::parseDirectory
#################################################################################################




################################################################################################
# sub radseq::processRadtags => to run radseq
################################################################################################
# arguments :
# 	- $keyFile : the keyFile to analyze
#	- $initialDir : the directory that contains all the files fastq
#	- $options : at least the options -e (enzyme) is necessary; use the option -P if paired-end or others options from process_radtags of stacks 
################################################################################################
# return boolean :
#	- 1 if processRadtags runned correctly
#	- else 0
################################################################################################
sub processRadtags

{
	toolbox::exportLog("ERROR: radseq::processRadtags : should get at least two arguments\n",0) if (@_ < 2);
	my ($keyFile,$initialDir,$options)=@_;
	toolbox::exportLog("ERROR: radseq::processRadtags : you need to specify at least -e process_radtags option of stacks\n",0) if ($options eq "");
	
	toolbox::exportLog("INFOS: radseq::processRadtags : running\n", 1);
	my $pathDir = `dirname $initialDir` or toolbox::exportLog("ERROR: radseq::processRadtags : error in dirname unix command using $initialDir directory\n",0);
	chomp($pathDir);
	my $outDir="$pathDir/outputRadseq/"; # output directory contains the demultiplexed fastq files
	#toolbox::exportLog("DEBUG: radseq::processRadtags : *$outDir*\n",1);
	my $temporaryDir="$pathDir/temporaryRadseq/"; #temporary directory contains the barcode and lanes directories
	my $barcodeDir="$temporaryDir/barcode/";
	toolbox::makeDir($outDir);			 # make an output directory to run process radtags
	toolbox::makeDir($temporaryDir);	 # make an temporary directory
	toolbox::makeDir($barcodeDir);		 # make an barcode directory to run process radtags
							  
	my @barcodeList = radseq::splitKeyFile($keyFile, $barcodeDir); # Verify the conformity of keyFile and split le file by lane
	#print Dumper @barcodeList;
		
	my @laneDirectories=radseq::parseDirectory($initialDir, $temporaryDir);	#make a directory by lane and distribute fastq files in the laneDirectory. 
			
	for my $barcode (0 .. $#barcodeList) 						#Iteration of each barcode file name
		{
			my $bc = $barcodeList[$barcode];
			if ($bc=~m/.+(lane[0-9]).txt$/)						#finding the lane number in barcode (keyFile splitted)
			{
				my $bc=$1;
				for my $directory (0 .. $#laneDirectories)		#Iteration of each directory (with fastq files)
				{
					my $dr = $laneDirectories[$directory];		
					if ($dr=~m/.+(lane[0-9])$/)					#finding the lane number in laneDirectory name
					{
						$dr=$1;
						if ($dr eq $bc)
						{
							my $cmd_line = "$radseq -p $laneDirectories[$directory] -o $outDir -b $barcodeList[$barcode] $options -i fastq"; 		# running radseq
							#DEBUG print "COMMANDE : \n$cmd_line\n";							
							
							if(toolbox::run($cmd_line)==1)		## if the command has been excuted correctly, export the log
							{
							   toolbox::exportLog("INFOS: radseq::processRadtags : correctly done\n",1);
							   my $logBrut = "$outDir/process_radtags.log";
							   my $logTarget = "$outDir/process_radtags_$dr.log";
							   my $command = "mv $logBrut $logTarget";
							   toolbox::run($command);
							   #`cp $outDir"process_radtags.log  "$outDir"process_radtags_"$dr".log"` or toolbox::exportLog("ERROR: radseq::processRadtags : error mv Log file using mv $outDir/process_radtags.log $outDir/process_radtags_$dr.log\n",0);				   	
							}
							else								## else erreur
							{
							   toolbox::exportLog("ERROR: radseq::processRadtags : ABORTED\n",0);
							}
						}	
					}	
				}	
			}
		}
		
	return 1;
}
################################################################################################
# END sub radseq::processRadtags
################################################################################################

1;


=head1 NOM

package I<radseq> 

=head1 SYNOPSIS

	use radseq;

	radseq::processRadtags($keyFile,$initialDir,$options); 
	
	radseq::parseDirectory($initialDir);
	
	radseq::splitKeyFile($keyFile, $outDir);
	

#=head1 DESCRIPTION

This module is a set of functions related to radseq module of Stacks software,  L<http://catchenlab.life.illinois.edu/stacks/>


=head2 Functions

	
=head3 processRadtags()

This function execute the radseq software to analyze a directory that contains fastq files.
Two arguments are required : a key file and a directory.

C<radseq::processRadtags($keyFile,$initialDir,$options, $outDir);>

Return 1 if radseq runned correctly else 0.
	
=head3 parseDirectory()

This function analyze a set of fastq files and rearrange each fastq file in a lane directory.

One argument is required: the directory with fastq files

C<radseq::parseDirectory($initialDir, $temporaryRadseq);>

=head3 splitKeyFile()

This function split the Keyfile file on the different lane and take them in a directory (that contains the files to run radseq::process_radtags) created
and check if "DNASample" don't contain "."'.
2 arguments are required : the Keyfile filename and the output directory name created.

Return 1 if radseq::splitKeyFile has ran correctly else 0.

Example :
C<radseq::splitKeyFile($keyFile, $barcodeDir);>


=head1 AUTHORS

Cecile Monat, Ayite Kougbeadjo, Marilyne Summo, Cedric Farcy, Mawusse Agbessi, Julie Orjuela, Sebastien Ravel Christine Tranchant and Francois Sabot

L<http://www.southgreen.fr/>

=cut

